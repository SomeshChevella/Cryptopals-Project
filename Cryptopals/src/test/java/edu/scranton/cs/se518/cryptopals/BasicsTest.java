/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.scranton.cs.se518.cryptopals;

import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class BasicsTest {

    @Test
    void testDecodeHex() {
        assertArrayEquals(
                new byte[]{
                        73, 39, 109, 32, 107, 105, 108, 108,
                        105, 110, 103, 32, 121, 111, 117, 114,
                        32, 98, 114, 97, 105, 110, 32, 108,
                        105, 107, 101, 32, 97, 32, 112, 111,
                        105, 115, 111, 110, 111, 117, 115, 32,
                        109, 117, 115, 104, 114, 111, 111, 109
                },
                Basics.decodeHex("49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d")
        );
    }

    @Test
    void testDecodeInvalidHex() {
        assertThrows(IllegalArgumentException.class, () -> Basics.decodeHex("0"));
        assertThrows(IllegalArgumentException.class, () -> Basics.decodeHex("0g"));
    }

    @Test
    void testHexToBase64() {
        assertEquals(
                "SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t",
                Basics.hexToBase64("49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d")
        );
    }

    @Test
    void testFixedXOR() {
        assertArrayEquals(
                Basics.decodeHex("746865206b696420646f6e277420706c6179"),
                Basics.fixedXOR(
                        Basics.decodeHex("1c0111001f010100061a024b53535009181c"),
                        Basics.decodeHex("686974207468652062756c6c277320657965")
                )
        );
    }

    private static byte[] digest(String message) {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            return messageDigest.digest(message.getBytes(StandardCharsets.UTF_8));
        } catch (NoSuchAlgorithmException exception) {
            throw new RuntimeException(exception);
        }
    }

    @Test
    void testBreakSingleByteXORCipher() {
        String message = "1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736";
        byte key = Basics.breakSingleByteXORCipher(message);
        String plaintext = Basics.decryptSingleByteXOR(message,key);

        // Compare message digests to avoid spoiling the secret.
        String expectedPlaintextDigest = "c93fc1ebee779045574aaac6aad7e6f0ac9e2b545efdd4dd6ed03c8bcee163e1";
        assertArrayEquals(Basics.decodeHex(expectedPlaintextDigest), digest(plaintext));
    }

    @Test
    void testDetectSingleByteXORCipher() throws IOException, URISyntaxException {
        Path resourcePath = Paths.get(Basics.class.getResource("/4.txt").toURI());
        List<String> messages = Files.readAllLines(resourcePath, StandardCharsets.UTF_8);
        String message = Basics.detectSingleByteXORCipher(messages);
        byte key = Basics.breakSingleByteXORCipher(message);
        String plaintext = Basics.decryptSingleByteXOR(message, key);

        // Compare message digests to avoid spoiling the secret.
        String expectedPlaintextDigest = "8486b6576e42125994969e7233a3e90201c8efa18d17d4a4b24bdb53c8d96b58";
        assertArrayEquals(Basics.decodeHex(expectedPlaintextDigest), digest(plaintext));
    }

    @Test
    void testRepeatingKeyXOR() {
        final String plaintext = "Burning 'em, if you ain't quick and nimble\n" +
                "I go crazy when I hear a cymbal";
        final byte[] key = "ICE".getBytes(StandardCharsets.UTF_8);
        final String ciphertext = "0b3637272a2b2e63622c2e69692a23693a2a3c6324202d623d63343c2a26226324272765272" +
                "a282b2f20430a652e2c652a3124333a653e2b2027630c692b20283165286326302e27282f";
        assertArrayEquals(Basics.decodeHex(ciphertext), Basics.repeatingKeyXOR(plaintext, key));
    }
}
